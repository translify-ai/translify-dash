name: extension nightly release
on:
  workflow_dispatch:
    inputs:
      firefox:
        default: "1"
        description: "is publish to firefox"
        type: string
        required: false
      userscript:
        default: "0"
        description: "is publish to userscript"
        type: string
        required: false
      edge:
        default: "0"
        description: "is publish to edge"
        type: string
        required: false
      chrome:
        default: "0"
        description: "is publish to chrome"
        type: string
        required: false
  # repository_dispatch:
  #   types:
  #     - build-nightly-extension
jobs:
  build:
    runs-on: ubuntu-latest
    concurrency: nightly-build
    steps:
      - name: Set BUILD_TIME
        id: buildtime
        run: echo "::set-output name=timestamp::$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          repository: translify-ai/translify-extension
          # ref: official
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      #https://stackoverflow.com/questions/61919141/read-json-file-in-github-actions
      - id: set_var
        run: |
          content=`cat ./manifest.json`
          echo "::set-output name=version::$(echo $content | jq -r '.version')"
      - name: Check version
        id: check_version
        continue-on-error: true
        run: |
          if [[ "${{ steps.set_var.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[1-9][0-9]*$ ]]; then
            echo "Version is nightly"
          else
            echo "Version is release"
            # exit 1
          fi
      - name: Setup Deno
        if: steps.check_version.outcome == 'success'
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.41.3
      # - uses: actions/setup-node@v3
      #   if: steps.check_version.outcome == 'success'
      #   with:
      #     node-version: '16.x'
      #     registry-url: 'https://registry.npmjs.org'
      # check version is 3 digits x.x.1-9 or x.x.0
      - name: Test
        if: steps.check_version.outcome == 'success'
        run: make test
      - name: Test i18n
        run: make testi18n
      - name: Build for release zip file
        if: steps.check_version.outcome == 'success'
        run: RELEASE_ZIP=1 make prod-buildzip
        env:
          IMMERSIVE_TRANSLATE_BUILD_TIME: ${{ steps.buildtime.outputs.timestamp }}
      - name: Add Version to folders
        if: steps.check_version.outcome == 'success'
        run: |
          cp dist/chrome.zip dist/chrome-translify-${{ steps.set_var.outputs.version }}.zip
          cp dist/firefox.zip dist/firefox-translify-${{ steps.set_var.outputs.version }}.zip


      - name: Clone public dash repo
        if: steps.check_version.outcome == 'success'
        run: git clone https://$PERSONAL_GITHUB_TOKEN@github.com/translify-ai/translify-dash dash-repo
        env:
          PERSONAL_GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Clone config repo
        run: git clone https://$PERSONAL_GITHUB_TOKEN@github.com/translify-ai/translify-config config-repo
        if: steps.check_version.outcome == 'success'
        env:
          PERSONAL_GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: add buildinConfigUpdatedAt field to repo/dist/default_config.json
        run: make generateconfig target=config-repo/dist/default_config.json
        env:
          IMMERSIVE_TRANSLATE_BUILD_TIME: ${{ steps.buildtime.outputs.timestamp }}
      - name: commit to config
        env:
          PERSONAL_GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          cd config-repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          # check is there is git tag with the same version
          # if not then create a new tag
          git add dist/default_config.json
          git commit -m "update default_config.json"
          echo v${{ steps.set_var.outputs.version }}
          git tag -l | grep v${{ steps.set_var.outputs.version }} || echo "yes"
          git tag -l | grep v${{ steps.set_var.outputs.version }} || git tag -a v${{ steps.set_var.outputs.version }} -m "v${{ steps.set_var.outputs.version }}"
          git tag -l
          git remote -v
          git push origin --follow-tags


      - name: publish options to dash
        run: make movetodash
      - name: commit to dash
        if: steps.check_version.outcome == 'success'
        env:
          PERSONAL_GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: |
          cd dash-repo
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add dist
          git commit -m "update dist"
          git remote -v
          git push

      - name: Build for store
        if: steps.check_version.outcome == 'success'
        run: make prod-buildall
        env:
          IMMERSIVE_TRANSLATE_BUILD_TIME: ${{ steps.buildtime.outputs.timestamp }}
      - run: make zipsource

      - uses: cardinalby/webext-buildtools-firefox-addons-action@v1
        if: steps.check_version.outcome == 'success' 
        name: submit to firefox
        with:
          zipFilePath: "dist/firefox_store.zip"
          sourcesZipFilePath: "dist/translify-source.zip"
          extensionId: "{05741c5c-57ee-4a51-a1d5-3ce338d8fe98}"
          jwtIssuer: ${{ secrets.FIREFOX_API_KEY }}
          jwtSecret: ${{ secrets.FIREFOX_API_SECRET }}

      - run: |
          curl --location 'https://api.github.com/repos/translify-ai/translify-dash/dispatches' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{secrets.PERSONAL_GITHUB_TOKEN}}' \
          --data '{
            "event_type": "deploy-rule"
          }'
